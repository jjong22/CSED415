from pwn import *

global i, j
i = 0
j = 0

def PRGA(S):
    global i, j
    while True:
        i = (i + 1) % 256
        j = (j + S[i]) % 256
        S[i], S[j] = S[j], S[i]

        # K = S[(S[i] + S[j]) % 256] # vanilla RC4
        K = S[j] # Charlie's modification for uRC4
        yield K

def decrypt(keystream, ciphertext):
    plaintext = ""
    for i in range(0, len(ciphertext), 2):
        plaintext += chr(int(ciphertext[i:i+2], 16) ^ next(keystream))
    return plaintext

r = remote('localhost', 10003)

r.recvuntil(b">>> ")
r.sendline(b"1")
r.recvuntil(b"- Give me your plaintext:\n")
r.sendline(b"\x00" * 0x1000)
dumped_keystream = r.recvline()
dumped_keystream = dumped_keystream[:-1]

s_box =  [-1] * 256

cnt = 0

while(1):
    s_i = int(dumped_keystream[cnt * 2:cnt * 2 + 2], 16)
    
    i = (i + 1) % 256
    j = (j + s_i) % 256

    s_box[i], s_box[j] = s_box[j], s_i
    
    cnt += 1
    
    if cnt == 0x1000:
        break
    
assert -1 not in s_box

keystream = PRGA(s_box)

r.recvuntil(b">>> ")
r.sendline(b"2")
r.recvuntil(b"- Encrypted secret key:\n")
cipher = r.recvline()
cipher = cipher[:-1]
cipher = cipher.decode()

print(decrypt(keystream, cipher))

r.interactive()

